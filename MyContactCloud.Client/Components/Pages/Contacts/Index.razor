@page "/contacts"
@using Microsoft.AspNetCore.Authorization
@using MyContactCloud.Client.Components.UI.Contact
@using MyContactCloud.Client.Services.Interfaces
@using MyContactCloud.Client.Components.UI
@attribute [Authorize]
@inject IContactDTOService ContactService
@inject ICategoryDTOService CategoryService
@inject NavigationManager Nav
@rendermode InteractiveServer

<PageTitle>My Contact Cloud | Contacts</PageTitle>

<div class="d-flex align-items-center mt-3">
    @if (!string.IsNullOrWhiteSpace(SearchTerm))
    {
        <h1>Search results for "@SearchTerm"</h1>
    }
    else if (CategoryId is not null or 0)
    {
        searchInput = null;
        <h1>Category: @(categories.FirstOrDefault(c => c.Id == CategoryId)?.Name ?? "Unknown")</h1>
    }
    else
    {
        <h1>All Contacts</h1>
    }
    <a href="contacts/create" class="ms-auto btn btn-primary rounded-pill">New Contact</a>
</div>

<div class="row g-3">
    <div class="col-12 col-lg-4">
        <div class="sideNav mb-3">
            <form @onsubmit="HandleSearch">
                <div class="input-group">
                    <InputText @bind-Value="searchInput" type="text" class="form-control" placeholder="Search" />
                    <button class="btn btn-primary">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </form>
            <div class="mt-5">
                <label class="form-label">
                    Category Filter
                </label>
                <InputSelect class="form-select" @bind-Value="CategoryId" @bind-Value:after="HandleCategoryChanged">
                    <option value="">
                        All Contacts
                    </option>
                    @foreach (CategoryDTO category in categories)
                    {
                        <option value="@category.Id">
                            @category.Name
                        </option>
                    }
                </InputSelect>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(toastMessage))
        {
            <ToastMessage @key="messageId" Message="@toastMessage" Color="@messageColor" />
        }
    </div>
    <div class="col-12 col-lg-8">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-1 g-3">
            @if (contacts.Any())
            {
                @foreach (ContactDTO contact in contacts)
                {
                    <div class="col" @key="contact.Id">
                        <ContactCard Contact="contact" OnDelete="DeleteContact" />
                    </div>
                }
            }
            else
            {
                <div class="text-center sideNav">
                    <h4>No Contacts found.</h4>
                    <p>
                        You can <a href="contacts/create">create one</a> here.
                    </p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [SupplyParameterFromQuery] // ?categoryId=5
    public int? CategoryId { get; set; }

    [SupplyParameterFromQuery] // ?searchTerm=sawyer
    public string? SearchTerm { get; set; }

    [SupplyParameterFromQuery] // ?message=hello
    public string? Message { get; set; }

    private IEnumerable<ContactDTO> contacts = [];
    private UserInfo? userInfo;
    private IEnumerable<CategoryDTO> categories = [];

    private string? searchInput;

    private string? toastMessage;
    private string? messageColor;
    private Guid messageId = Guid.NewGuid();


    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        categories = await CategoryService.GetCategoriesAsync(userInfo!.UserId);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Message))
        {
            ShowToastMessage(Message);
        }

        if (!string.IsNullOrWhiteSpace(SearchTerm))
        {
            searchInput = SearchTerm;
            CategoryId = null;
            contacts = await ContactService.SearchContactsAsync(SearchTerm, userInfo!.UserId);
        }
        else if (CategoryId is not null or 0)
        {
            contacts = await ContactService.GetContactsByCategoryIdAsync(CategoryId.Value, userInfo!.UserId);
        }
        else
        {
            // update
            contacts = await ContactService.GetContactsAsync(userInfo!.UserId);
        }
    }

    private async Task DeleteContact(int contactId)
    {
        try
        {
            // delete the contact
            await ContactService.DeleteContactAsync(contactId, userInfo!.UserId);

            // update
            contacts = await ContactService.GetContactsAsync(userInfo!.UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }

    }

    private void HandleCategoryChanged()
    {
        ShowToastMessage("Category was changed");

        string url = Nav.GetUriWithQueryParameter(nameof(CategoryId), CategoryId);
        Nav.NavigateTo(url);
    }

    private void HandleSearch()
    {
        Dictionary<string, object?> queryParameters = new Dictionary<string, object?>()
        {
            { nameof(CategoryId), null}, {nameof(SearchTerm), searchInput}
        };

        string url = Nav.GetUriWithQueryParameters(queryParameters);
        Nav.NavigateTo(url);
    }

    private void ShowToastMessage (string message)
    {
        toastMessage = message;

        if(message.ToLower().Contains("wrong") || message.Contains("error"))
        {
            messageColor = "danger";
        }
        else
        {
            messageColor = "success";
        }

        messageId = Guid.NewGuid();
    }


}
