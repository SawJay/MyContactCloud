@page "/contacts"
@using Microsoft.AspNetCore.Authorization
@using MyContactCloud.Client.Components.UI.Contact
@using MyContactCloud.Client.Services.Interfaces
@using MyContactCloud.Client.Components.UI
@attribute [Authorize]
@inject IContactDTOService ContactService
@rendermode InteractiveServer

<PageTitle>MyContactCloud | Contacts</PageTitle>

<div class="d-flex align-items-center mt-3">
    <h1>All Contacts</h1>
    <a href="contacts/create" class="ms-auto btn btn-primary rounded-pill">New Contact</a>
</div>

<div class="row g-3">
    <div class="col-12 col-lg-4">
        <div class="sideNav mb-3">
            <form>
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search" />
                    <button class="btn btn-primary">
                        Search
                    </button>
                </div>
            </form>
            <div class="mt-5">
                <label class="form-label">
                    Category Filter
                </label>
                <select class="form-select">
                    <option value="">
                        All Contacts
                        </option>
                </select>
            </div>
        </div>
    </div>
    <div class="col-12 col-lg-8">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-1 g-3">
            @if(contacts.Any())
            {
                @foreach(ContactDTO contact in contacts)
                {
                    <div class="col" @key="contact.Id">
                        <ContactCard Contact="contact" />
                    </div>
                }
            }
            else
            {
                <div class="text-center sideNav">
                    <h4>No Contacts found.</h4>
                    <p>
                        You can <a href="contacts/create">create one</a> here.
                    </p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private IEnumerable<ContactDTO> contacts = [];
    private UserInfo? userInfo;

    protected override async Task OnInitializedAsync()
    {
        // get id from auth state
        // make getcontacts in dto service
        // make a repo method for getcontacts async
        // add those to interface
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

        contacts = await ContactService.GetContactsAsync(userInfo!.UserId);
    }

}
