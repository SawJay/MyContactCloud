@page "/categories/email/{categoryId:int}"
@using Microsoft.AspNetCore.Authorization
@using MyContactCloud.Client.Components.UI
@using MyContactCloud.Client.Services.Interfaces
@inject IContactDTOService ContactService
@inject ICategoryDTOService CategoryService
@inject NavigationManager Nav

@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>MyContactCloud | Email Category</PageTitle>

<div class="card shadow-lg my-3">
    <div class="card-body">
        @if (emailData is not null)
        {
            <EmailForm EmailData="emailData" OnSubmit="HandleSubmit" />
        }
    </div>
</div>

@code {
    [Parameter]
    public int CategoryId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private EmailData? emailData;
    private UserInfo? userInfo;
    private IEnumerable<ContactDTO> contacts = [];
    private CategoryDTO? category;


    protected override async Task OnInitializedAsync ()
    {
        // get the category or get all categorys contacts
        // get userId
        // set emailData to have category contacts emails
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            category = await CategoryService.GetCategoryByIdAsync(CategoryId, userInfo!.UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        if (category is null)
        {
            Nav.NavigateTo("categories");
        }
        else
        {
            IEnumerable<string> emails = category.Contacts.Select(c => c.Email!);
            string recipients = string.Join("; ", emails);

            emailData = new EmailData()
            {
                Recipients = recipients,
                Subject = $"Group Message for {category.Name}"
            };
        }

    }

    private async Task HandleSubmit ()
    {
        string message = $"Something went wrong emailing the {category?.Name} category. Please try again later.";

        // send email
        // redirect to contacts index
        try
        {
            bool success = await CategoryService.EmailCategoryAsync(CategoryId, emailData!, userInfo!.UserId);

            if (success)
            {
                message = $"Email successfully sent to your {category?.Name} category!";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        Nav.NavigateTo($"contacts?message={message}");
    }

    
}
